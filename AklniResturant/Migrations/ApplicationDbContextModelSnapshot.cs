// <auto-generated />
using System;
using AklniResturant.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AklniResturant.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.21")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AklniResturant.Models.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            Name = "Egyptian Dishes"
                        },
                        new
                        {
                            CategoryId = 2,
                            Name = "Grilled"
                        },
                        new
                        {
                            CategoryId = 3,
                            Name = "Seafood"
                        },
                        new
                        {
                            CategoryId = 4,
                            Name = "Sandwiches"
                        },
                        new
                        {
                            CategoryId = 5,
                            Name = "Salads"
                        },
                        new
                        {
                            CategoryId = 6,
                            Name = "Drinks"
                        },
                        new
                        {
                            CategoryId = 7,
                            Name = "Desserts"
                        });
                });

            modelBuilder.Entity("AklniResturant.Models.Ingredient", b =>
                {
                    b.Property<int>("IngredientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IngredientId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IngredientId");

                    b.ToTable("Ingredients");

                    b.HasData(
                        new
                        {
                            IngredientId = 1,
                            Name = "Rice"
                        },
                        new
                        {
                            IngredientId = 2,
                            Name = "Lentils"
                        },
                        new
                        {
                            IngredientId = 3,
                            Name = "Pasta"
                        },
                        new
                        {
                            IngredientId = 4,
                            Name = "Tomato Sauce"
                        },
                        new
                        {
                            IngredientId = 5,
                            Name = "Fried Onions"
                        },
                        new
                        {
                            IngredientId = 6,
                            Name = "Garlic"
                        },
                        new
                        {
                            IngredientId = 7,
                            Name = "Chili Pepper"
                        },
                        new
                        {
                            IngredientId = 8,
                            Name = "Cumin"
                        },
                        new
                        {
                            IngredientId = 9,
                            Name = "Coriander"
                        },
                        new
                        {
                            IngredientId = 10,
                            Name = "Beef"
                        },
                        new
                        {
                            IngredientId = 11,
                            Name = "Chicken"
                        },
                        new
                        {
                            IngredientId = 12,
                            Name = "Kebda"
                        },
                        new
                        {
                            IngredientId = 13,
                            Name = "Sogo2"
                        },
                        new
                        {
                            IngredientId = 14,
                            Name = "Molokhia Leaves"
                        },
                        new
                        {
                            IngredientId = 15,
                            Name = "Bamia"
                        },
                        new
                        {
                            IngredientId = 16,
                            Name = "Fish Fillet"
                        },
                        new
                        {
                            IngredientId = 17,
                            Name = "Shrimp"
                        },
                        new
                        {
                            IngredientId = 18,
                            Name = "Tahina"
                        },
                        new
                        {
                            IngredientId = 19,
                            Name = "Chickpeas"
                        },
                        new
                        {
                            IngredientId = 20,
                            Name = "Ful"
                        },
                        new
                        {
                            IngredientId = 21,
                            Name = "Parsley"
                        },
                        new
                        {
                            IngredientId = 22,
                            Name = "Lemon Juice"
                        },
                        new
                        {
                            IngredientId = 23,
                            Name = "Olive Oil"
                        },
                        new
                        {
                            IngredientId = 24,
                            Name = "Flour"
                        },
                        new
                        {
                            IngredientId = 25,
                            Name = "Sugar"
                        },
                        new
                        {
                            IngredientId = 26,
                            Name = "Milk"
                        },
                        new
                        {
                            IngredientId = 27,
                            Name = "Nuts (Pistachio, Almond, Walnut)"
                        },
                        new
                        {
                            IngredientId = 28,
                            Name = "Butter or Ghee"
                        },
                        new
                        {
                            IngredientId = 29,
                            Name = "Honey or Syrup"
                        },
                        new
                        {
                            IngredientId = 30,
                            Name = "Mint Leaves"
                        },
                        new
                        {
                            IngredientId = 31,
                            Name = "Tea Leaves"
                        },
                        new
                        {
                            IngredientId = 32,
                            Name = "Coffee Beans"
                        },
                        new
                        {
                            IngredientId = 33,
                            Name = "Mango"
                        },
                        new
                        {
                            IngredientId = 34,
                            Name = "Guava"
                        },
                        new
                        {
                            IngredientId = 35,
                            Name = "Strawberry"
                        });
                });

            modelBuilder.Entity("AklniResturant.Models.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderId"));

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("OrderId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("AklniResturant.Models.OrderItem", b =>
                {
                    b.Property<int>("OrderItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderItemId"));

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<double>("UnitPrice")
                        .HasColumnType("float");

                    b.HasKey("OrderItemId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("AklniResturant.Models.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductId"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.HasKey("ProductId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            ProductId = 1,
                            CategoryId = 1,
                            Description = "Traditional Egyptian mix of rice, lentils, pasta, tomato sauce, and fried onions.",
                            ImageUrl = "",
                            Name = "Koshary",
                            Price = 45.0,
                            Stock = 30
                        },
                        new
                        {
                            ProductId = 2,
                            CategoryId = 1,
                            Description = "Rich green molokhia soup served with rice and roasted chicken.",
                            ImageUrl = "",
                            Name = "Molokhia with Chicken",
                            Price = 70.0,
                            Stock = 25
                        },
                        new
                        {
                            ProductId = 3,
                            CategoryId = 1,
                            Description = "Okra stew cooked with tender beef cubes and tomato sauce.",
                            ImageUrl = "",
                            Name = "Bamia with Meat",
                            Price = 80.0,
                            Stock = 20
                        },
                        new
                        {
                            ProductId = 4,
                            CategoryId = 1,
                            Description = "Layers of crispy bread, rice, and meat topped with garlic tomato sauce.",
                            ImageUrl = "",
                            Name = "Fattah",
                            Price = 90.0,
                            Stock = 15
                        },
                        new
                        {
                            ProductId = 5,
                            CategoryId = 1,
                            Description = "Classic Egyptian fava beans with olive oil, cumin, and lemon.",
                            ImageUrl = "",
                            Name = "Ful Medames",
                            Price = 25.0,
                            Stock = 40
                        },
                        new
                        {
                            ProductId = 6,
                            CategoryId = 2,
                            Description = "Juicy minced beef skewers grilled to perfection.",
                            ImageUrl = "",
                            Name = "Grilled Kofta",
                            Price = 85.0,
                            Stock = 25
                        },
                        new
                        {
                            ProductId = 7,
                            CategoryId = 2,
                            Description = "Charcoal-grilled marinated chicken served with salad and tahina.",
                            ImageUrl = "",
                            Name = "Grilled Chicken",
                            Price = 95.0,
                            Stock = 20
                        },
                        new
                        {
                            ProductId = 8,
                            CategoryId = 2,
                            Description = "Alexandrian-style liver sautéed with garlic and chili.",
                            ImageUrl = "",
                            Name = "Liver (Kebda Eskandarani)",
                            Price = 70.0,
                            Stock = 18
                        },
                        new
                        {
                            ProductId = 9,
                            CategoryId = 2,
                            Description = "Spicy grilled Egyptian sausages with garlic and cumin.",
                            ImageUrl = "",
                            Name = "Grilled Sogo2",
                            Price = 75.0,
                            Stock = 18
                        },
                        new
                        {
                            ProductId = 10,
                            CategoryId = 3,
                            Description = "Crispy fried fish fillet served with rice and tahina sauce.",
                            ImageUrl = "",
                            Name = "Fried Fish Fillet",
                            Price = 110.0,
                            Stock = 15
                        },
                        new
                        {
                            ProductId = 11,
                            CategoryId = 3,
                            Description = "Fresh shrimp grilled with lemon, garlic, and olive oil.",
                            ImageUrl = "",
                            Name = "Grilled Shrimp",
                            Price = 140.0,
                            Stock = 12
                        },
                        new
                        {
                            ProductId = 12,
                            CategoryId = 3,
                            Description = "Basmati rice cooked with mixed seafood and herbs.",
                            ImageUrl = "",
                            Name = "Seafood Rice",
                            Price = 130.0,
                            Stock = 10
                        },
                        new
                        {
                            ProductId = 13,
                            CategoryId = 4,
                            Description = "Spicy liver sandwich with tahina and pickles.",
                            ImageUrl = "",
                            Name = "Kebda Sandwich",
                            Price = 35.0,
                            Stock = 30
                        },
                        new
                        {
                            ProductId = 14,
                            CategoryId = 4,
                            Description = "Egyptian sausage sandwich with chili and garlic.",
                            ImageUrl = "",
                            Name = "Sogo2 Sandwich",
                            Price = 40.0,
                            Stock = 30
                        },
                        new
                        {
                            ProductId = 15,
                            CategoryId = 4,
                            Description = "Tender beef or chicken shawarma wrapped in pita with garlic sauce.",
                            ImageUrl = "",
                            Name = "Shawarma Sandwich",
                            Price = 50.0,
                            Stock = 25
                        },
                        new
                        {
                            ProductId = 16,
                            CategoryId = 4,
                            Description = "Deep-fried chickpea balls with tahina and salad in pita bread.",
                            ImageUrl = "",
                            Name = "Falafel Sandwich",
                            Price = 30.0,
                            Stock = 35
                        },
                        new
                        {
                            ProductId = 17,
                            CategoryId = 5,
                            Description = "Creamy tahina dip flavored with lemon and garlic.",
                            ImageUrl = "",
                            Name = "Tahina Salad",
                            Price = 15.0,
                            Stock = 50
                        },
                        new
                        {
                            ProductId = 18,
                            CategoryId = 5,
                            Description = "Egyptian-style salad with tomatoes, cucumbers, onions, and parsley.",
                            ImageUrl = "",
                            Name = "Baladi Salad",
                            Price = 20.0,
                            Stock = 40
                        },
                        new
                        {
                            ProductId = 19,
                            CategoryId = 5,
                            Description = "Healthy chickpea salad with olive oil and lemon dressing.",
                            ImageUrl = "",
                            Name = "Chickpea Salad",
                            Price = 25.0,
                            Stock = 30
                        },
                        new
                        {
                            ProductId = 20,
                            CategoryId = 6,
                            Description = "Refreshing black tea infused with fresh mint leaves.",
                            ImageUrl = "",
                            Name = "Mint Tea",
                            Price = 20.0,
                            Stock = 50
                        },
                        new
                        {
                            ProductId = 21,
                            CategoryId = 6,
                            Description = "Strong traditional coffee served in a small cup.",
                            ImageUrl = "",
                            Name = "Turkish Coffee",
                            Price = 25.0,
                            Stock = 40
                        },
                        new
                        {
                            ProductId = 22,
                            CategoryId = 6,
                            Description = "Freshly blended mango juice made from ripe mangoes.",
                            ImageUrl = "",
                            Name = "Mango Juice",
                            Price = 30.0,
                            Stock = 35
                        },
                        new
                        {
                            ProductId = 23,
                            CategoryId = 6,
                            Description = "Thick and sweet guava juice served cold.",
                            ImageUrl = "",
                            Name = "Guava Juice",
                            Price = 30.0,
                            Stock = 35
                        },
                        new
                        {
                            ProductId = 24,
                            CategoryId = 6,
                            Description = "Creamy strawberry smoothie with milk and honey.",
                            ImageUrl = "",
                            Name = "Strawberry Smoothie",
                            Price = 35.0,
                            Stock = 25
                        },
                        new
                        {
                            ProductId = 25,
                            CategoryId = 7,
                            Description = "Sweet semolina cake soaked in syrup and topped with nuts.",
                            ImageUrl = "",
                            Name = "Basbousa",
                            Price = 25.0,
                            Stock = 30
                        },
                        new
                        {
                            ProductId = 26,
                            CategoryId = 7,
                            Description = "Layers of pastry filled with nuts and honey syrup.",
                            ImageUrl = "",
                            Name = "Baklava",
                            Price = 35.0,
                            Stock = 25
                        },
                        new
                        {
                            ProductId = 27,
                            CategoryId = 7,
                            Description = "Creamy rice pudding with milk and cinnamon.",
                            ImageUrl = "",
                            Name = "Rice Pudding",
                            Price = 30.0,
                            Stock = 20
                        },
                        new
                        {
                            ProductId = 28,
                            CategoryId = 7,
                            Description = "Traditional Egyptian dessert made with puff pastry, milk, and nuts.",
                            ImageUrl = "",
                            Name = "Om Ali",
                            Price = 40.0,
                            Stock = 18
                        });
                });

            modelBuilder.Entity("AklniResturant.Models.ProductIngredient", b =>
                {
                    b.Property<int>("ProductIngredientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductIngredientId"));

                    b.Property<int>("IngredientId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("ProductIngredientId");

                    b.HasIndex("IngredientId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProdIngredients");

                    b.HasData(
                        new
                        {
                            ProductIngredientId = 1,
                            IngredientId = 1,
                            ProductId = 1
                        },
                        new
                        {
                            ProductIngredientId = 2,
                            IngredientId = 2,
                            ProductId = 1
                        },
                        new
                        {
                            ProductIngredientId = 3,
                            IngredientId = 3,
                            ProductId = 1
                        },
                        new
                        {
                            ProductIngredientId = 4,
                            IngredientId = 4,
                            ProductId = 1
                        },
                        new
                        {
                            ProductIngredientId = 5,
                            IngredientId = 5,
                            ProductId = 1
                        },
                        new
                        {
                            ProductIngredientId = 6,
                            IngredientId = 8,
                            ProductId = 1
                        },
                        new
                        {
                            ProductIngredientId = 7,
                            IngredientId = 14,
                            ProductId = 2
                        },
                        new
                        {
                            ProductIngredientId = 8,
                            IngredientId = 11,
                            ProductId = 2
                        },
                        new
                        {
                            ProductIngredientId = 9,
                            IngredientId = 1,
                            ProductId = 2
                        },
                        new
                        {
                            ProductIngredientId = 10,
                            IngredientId = 6,
                            ProductId = 2
                        },
                        new
                        {
                            ProductIngredientId = 11,
                            IngredientId = 22,
                            ProductId = 2
                        },
                        new
                        {
                            ProductIngredientId = 12,
                            IngredientId = 15,
                            ProductId = 3
                        },
                        new
                        {
                            ProductIngredientId = 13,
                            IngredientId = 10,
                            ProductId = 3
                        },
                        new
                        {
                            ProductIngredientId = 14,
                            IngredientId = 4,
                            ProductId = 3
                        },
                        new
                        {
                            ProductIngredientId = 15,
                            IngredientId = 6,
                            ProductId = 3
                        },
                        new
                        {
                            ProductIngredientId = 16,
                            IngredientId = 8,
                            ProductId = 3
                        },
                        new
                        {
                            ProductIngredientId = 17,
                            IngredientId = 1,
                            ProductId = 4
                        },
                        new
                        {
                            ProductIngredientId = 18,
                            IngredientId = 10,
                            ProductId = 4
                        },
                        new
                        {
                            ProductIngredientId = 19,
                            IngredientId = 6,
                            ProductId = 4
                        },
                        new
                        {
                            ProductIngredientId = 20,
                            IngredientId = 4,
                            ProductId = 4
                        },
                        new
                        {
                            ProductIngredientId = 21,
                            IngredientId = 20,
                            ProductId = 5
                        },
                        new
                        {
                            ProductIngredientId = 22,
                            IngredientId = 8,
                            ProductId = 5
                        },
                        new
                        {
                            ProductIngredientId = 23,
                            IngredientId = 22,
                            ProductId = 5
                        },
                        new
                        {
                            ProductIngredientId = 24,
                            IngredientId = 23,
                            ProductId = 5
                        },
                        new
                        {
                            ProductIngredientId = 25,
                            IngredientId = 10,
                            ProductId = 6
                        },
                        new
                        {
                            ProductIngredientId = 26,
                            IngredientId = 6,
                            ProductId = 6
                        },
                        new
                        {
                            ProductIngredientId = 27,
                            IngredientId = 8,
                            ProductId = 6
                        },
                        new
                        {
                            ProductIngredientId = 28,
                            IngredientId = 9,
                            ProductId = 6
                        },
                        new
                        {
                            ProductIngredientId = 29,
                            IngredientId = 11,
                            ProductId = 7
                        },
                        new
                        {
                            ProductIngredientId = 30,
                            IngredientId = 18,
                            ProductId = 7
                        },
                        new
                        {
                            ProductIngredientId = 31,
                            IngredientId = 21,
                            ProductId = 7
                        },
                        new
                        {
                            ProductIngredientId = 32,
                            IngredientId = 22,
                            ProductId = 7
                        },
                        new
                        {
                            ProductIngredientId = 33,
                            IngredientId = 12,
                            ProductId = 8
                        },
                        new
                        {
                            ProductIngredientId = 34,
                            IngredientId = 6,
                            ProductId = 8
                        },
                        new
                        {
                            ProductIngredientId = 35,
                            IngredientId = 7,
                            ProductId = 8
                        },
                        new
                        {
                            ProductIngredientId = 36,
                            IngredientId = 13,
                            ProductId = 9
                        },
                        new
                        {
                            ProductIngredientId = 37,
                            IngredientId = 6,
                            ProductId = 9
                        },
                        new
                        {
                            ProductIngredientId = 38,
                            IngredientId = 7,
                            ProductId = 9
                        },
                        new
                        {
                            ProductIngredientId = 39,
                            IngredientId = 8,
                            ProductId = 9
                        },
                        new
                        {
                            ProductIngredientId = 40,
                            IngredientId = 16,
                            ProductId = 10
                        },
                        new
                        {
                            ProductIngredientId = 41,
                            IngredientId = 18,
                            ProductId = 10
                        },
                        new
                        {
                            ProductIngredientId = 42,
                            IngredientId = 22,
                            ProductId = 10
                        },
                        new
                        {
                            ProductIngredientId = 43,
                            IngredientId = 23,
                            ProductId = 10
                        },
                        new
                        {
                            ProductIngredientId = 44,
                            IngredientId = 17,
                            ProductId = 11
                        },
                        new
                        {
                            ProductIngredientId = 45,
                            IngredientId = 6,
                            ProductId = 11
                        },
                        new
                        {
                            ProductIngredientId = 46,
                            IngredientId = 22,
                            ProductId = 11
                        },
                        new
                        {
                            ProductIngredientId = 47,
                            IngredientId = 23,
                            ProductId = 11
                        },
                        new
                        {
                            ProductIngredientId = 48,
                            IngredientId = 16,
                            ProductId = 12
                        },
                        new
                        {
                            ProductIngredientId = 49,
                            IngredientId = 17,
                            ProductId = 12
                        },
                        new
                        {
                            ProductIngredientId = 50,
                            IngredientId = 1,
                            ProductId = 12
                        },
                        new
                        {
                            ProductIngredientId = 51,
                            IngredientId = 21,
                            ProductId = 12
                        },
                        new
                        {
                            ProductIngredientId = 52,
                            IngredientId = 23,
                            ProductId = 12
                        },
                        new
                        {
                            ProductIngredientId = 53,
                            IngredientId = 12,
                            ProductId = 13
                        },
                        new
                        {
                            ProductIngredientId = 54,
                            IngredientId = 18,
                            ProductId = 13
                        },
                        new
                        {
                            ProductIngredientId = 55,
                            IngredientId = 7,
                            ProductId = 13
                        },
                        new
                        {
                            ProductIngredientId = 56,
                            IngredientId = 13,
                            ProductId = 14
                        },
                        new
                        {
                            ProductIngredientId = 57,
                            IngredientId = 6,
                            ProductId = 14
                        },
                        new
                        {
                            ProductIngredientId = 58,
                            IngredientId = 7,
                            ProductId = 14
                        },
                        new
                        {
                            ProductIngredientId = 59,
                            IngredientId = 10,
                            ProductId = 15
                        },
                        new
                        {
                            ProductIngredientId = 60,
                            IngredientId = 11,
                            ProductId = 15
                        },
                        new
                        {
                            ProductIngredientId = 61,
                            IngredientId = 6,
                            ProductId = 15
                        },
                        new
                        {
                            ProductIngredientId = 62,
                            IngredientId = 18,
                            ProductId = 15
                        },
                        new
                        {
                            ProductIngredientId = 63,
                            IngredientId = 19,
                            ProductId = 16
                        },
                        new
                        {
                            ProductIngredientId = 64,
                            IngredientId = 18,
                            ProductId = 16
                        },
                        new
                        {
                            ProductIngredientId = 65,
                            IngredientId = 21,
                            ProductId = 16
                        },
                        new
                        {
                            ProductIngredientId = 66,
                            IngredientId = 18,
                            ProductId = 17
                        },
                        new
                        {
                            ProductIngredientId = 67,
                            IngredientId = 22,
                            ProductId = 17
                        },
                        new
                        {
                            ProductIngredientId = 68,
                            IngredientId = 6,
                            ProductId = 17
                        },
                        new
                        {
                            ProductIngredientId = 69,
                            IngredientId = 21,
                            ProductId = 18
                        },
                        new
                        {
                            ProductIngredientId = 70,
                            IngredientId = 23,
                            ProductId = 18
                        },
                        new
                        {
                            ProductIngredientId = 71,
                            IngredientId = 22,
                            ProductId = 18
                        },
                        new
                        {
                            ProductIngredientId = 72,
                            IngredientId = 19,
                            ProductId = 19
                        },
                        new
                        {
                            ProductIngredientId = 73,
                            IngredientId = 21,
                            ProductId = 19
                        },
                        new
                        {
                            ProductIngredientId = 74,
                            IngredientId = 23,
                            ProductId = 19
                        },
                        new
                        {
                            ProductIngredientId = 75,
                            IngredientId = 22,
                            ProductId = 19
                        },
                        new
                        {
                            ProductIngredientId = 76,
                            IngredientId = 31,
                            ProductId = 20
                        },
                        new
                        {
                            ProductIngredientId = 77,
                            IngredientId = 30,
                            ProductId = 20
                        },
                        new
                        {
                            ProductIngredientId = 78,
                            IngredientId = 32,
                            ProductId = 21
                        },
                        new
                        {
                            ProductIngredientId = 79,
                            IngredientId = 33,
                            ProductId = 22
                        },
                        new
                        {
                            ProductIngredientId = 80,
                            IngredientId = 26,
                            ProductId = 22
                        },
                        new
                        {
                            ProductIngredientId = 81,
                            IngredientId = 29,
                            ProductId = 22
                        },
                        new
                        {
                            ProductIngredientId = 82,
                            IngredientId = 34,
                            ProductId = 23
                        },
                        new
                        {
                            ProductIngredientId = 83,
                            IngredientId = 26,
                            ProductId = 23
                        },
                        new
                        {
                            ProductIngredientId = 84,
                            IngredientId = 35,
                            ProductId = 24
                        },
                        new
                        {
                            ProductIngredientId = 85,
                            IngredientId = 26,
                            ProductId = 24
                        },
                        new
                        {
                            ProductIngredientId = 86,
                            IngredientId = 29,
                            ProductId = 24
                        },
                        new
                        {
                            ProductIngredientId = 87,
                            IngredientId = 24,
                            ProductId = 25
                        },
                        new
                        {
                            ProductIngredientId = 88,
                            IngredientId = 25,
                            ProductId = 25
                        },
                        new
                        {
                            ProductIngredientId = 89,
                            IngredientId = 29,
                            ProductId = 25
                        },
                        new
                        {
                            ProductIngredientId = 90,
                            IngredientId = 27,
                            ProductId = 25
                        },
                        new
                        {
                            ProductIngredientId = 91,
                            IngredientId = 24,
                            ProductId = 26
                        },
                        new
                        {
                            ProductIngredientId = 92,
                            IngredientId = 27,
                            ProductId = 26
                        },
                        new
                        {
                            ProductIngredientId = 93,
                            IngredientId = 29,
                            ProductId = 26
                        },
                        new
                        {
                            ProductIngredientId = 94,
                            IngredientId = 28,
                            ProductId = 26
                        },
                        new
                        {
                            ProductIngredientId = 95,
                            IngredientId = 1,
                            ProductId = 27
                        },
                        new
                        {
                            ProductIngredientId = 96,
                            IngredientId = 26,
                            ProductId = 27
                        },
                        new
                        {
                            ProductIngredientId = 97,
                            IngredientId = 25,
                            ProductId = 27
                        },
                        new
                        {
                            ProductIngredientId = 98,
                            IngredientId = 24,
                            ProductId = 28
                        },
                        new
                        {
                            ProductIngredientId = 99,
                            IngredientId = 26,
                            ProductId = 28
                        },
                        new
                        {
                            ProductIngredientId = 100,
                            IngredientId = 27,
                            ProductId = 28
                        },
                        new
                        {
                            ProductIngredientId = 101,
                            IngredientId = 28,
                            ProductId = 28
                        });
                });

            modelBuilder.Entity("AklniResturant.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("AklniResturant.Models.UserCart", b =>
                {
                    b.Property<int>("UserCartId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserCartId"));

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserCartId");

                    b.HasIndex("UserId");

                    b.ToTable("UserCarts");
                });

            modelBuilder.Entity("AklniResturant.Models.UserCartItem", b =>
                {
                    b.Property<int>("UserCartItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserCartItemId"));

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<double>("UnitPrice")
                        .HasColumnType("float");

                    b.Property<int>("UserCartId")
                        .HasColumnType("int");

                    b.HasKey("UserCartItemId");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserCartId");

                    b.ToTable("UserCartItems");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("AklniResturant.Models.Order", b =>
                {
                    b.HasOne("AklniResturant.Models.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AklniResturant.Models.OrderItem", b =>
                {
                    b.HasOne("AklniResturant.Models.Order", "Order")
                        .WithMany("OrdersItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AklniResturant.Models.Product", "Product")
                        .WithMany("OrderItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("AklniResturant.Models.Product", b =>
                {
                    b.HasOne("AklniResturant.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("AklniResturant.Models.ProductIngredient", b =>
                {
                    b.HasOne("AklniResturant.Models.Ingredient", "Ingredient")
                        .WithMany("ProdIngredients")
                        .HasForeignKey("IngredientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AklniResturant.Models.Product", "Product")
                        .WithMany("ProdIngredients")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ingredient");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("AklniResturant.Models.UserCart", b =>
                {
                    b.HasOne("AklniResturant.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("AklniResturant.Models.UserCartItem", b =>
                {
                    b.HasOne("AklniResturant.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AklniResturant.Models.UserCart", "UserCart")
                        .WithMany("Items")
                        .HasForeignKey("UserCartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("UserCart");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("AklniResturant.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("AklniResturant.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AklniResturant.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("AklniResturant.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AklniResturant.Models.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("AklniResturant.Models.Ingredient", b =>
                {
                    b.Navigation("ProdIngredients");
                });

            modelBuilder.Entity("AklniResturant.Models.Order", b =>
                {
                    b.Navigation("OrdersItems");
                });

            modelBuilder.Entity("AklniResturant.Models.Product", b =>
                {
                    b.Navigation("OrderItems");

                    b.Navigation("ProdIngredients");
                });

            modelBuilder.Entity("AklniResturant.Models.User", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("AklniResturant.Models.UserCart", b =>
                {
                    b.Navigation("Items");
                });
#pragma warning restore 612, 618
        }
    }
}
